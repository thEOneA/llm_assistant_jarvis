// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../models/llm_config.dart';
import '../models/record_entity.dart';
import '../models/speaker_entity.dart';
import '../models/summary_entity.dart';
import '../models/todo_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 3639386993797467251),
      name: 'LlmConfigEntity',
      lastPropertyId: const obx_int.IdUid(5, 701999258548053285),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7739286151285964786),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3765193460152227179),
            name: 'provider',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7278373418289004811),
            name: 'model',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5672948533657013582),
            name: 'apiKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 701999258548053285),
            name: 'baseUrl',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 6448829547085728513),
      name: 'RecordEntity',
      lastPropertyId: const obx_int.IdUid(6, 4585192549237271515),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3813377154501744825),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5714868844106961341),
            name: 'role',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7256726488811853882),
            name: 'content',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1149880368058187568),
            name: 'category',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(1, 4998011467551157648)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3401953113599162706),
            name: 'vector',
            type: 28,
            flags: 8,
            indexId: const obx_int.IdUid(2, 4411872618098855321),
            hnswParams: obx_int.ModelHnswParams(
              dimensions: 1536,
              distanceType: 2,
            )),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4585192549237271515),
            name: 'createdAt',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(3, 4189536407566111915))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1735529651134350639),
      name: 'SpeakerEntity',
      lastPropertyId: const obx_int.IdUid(5, 8769346313747003705),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5569633206374227670),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7345673300178180752),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3890781300892091993),
            name: 'model',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7222509341564807328),
            name: 'embedding',
            type: 28,
            flags: 8,
            indexId: const obx_int.IdUid(4, 8759331971120747696),
            hnswParams: obx_int.ModelHnswParams(
              dimensions: 192,
              distanceType: 2,
            )),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8769346313747003705),
            name: 'createdAt',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 4416477489622853758),
      name: 'SummaryEntity',
      lastPropertyId: const obx_int.IdUid(8, 7474347114100388453),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4030519740997150412),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3079897567194454884),
            name: 'subject',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8642453843016894586),
            name: 'content',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2795835402707276050),
            name: 'vector',
            type: 28,
            flags: 8,
            indexId: const obx_int.IdUid(5, 3246225434025514792),
            hnswParams: obx_int.ModelHnswParams(
              dimensions: 1536,
              distanceType: 2,
            )),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2045032190222721588),
            name: 'startTime',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(6, 1193253382977138933)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 427301010026080185),
            name: 'endTime',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(7, 7345308704392703)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7792097393847604646),
            name: 'createdAt',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(8, 1013958804632554431)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7474347114100388453),
            name: 'isMeeting',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 6033791281029208454),
      name: 'TodoEntity',
      lastPropertyId: const obx_int.IdUid(8, 7700129863954245269),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4012163451917408469),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3068455424218506646),
            name: 'task',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 839588025429094326),
            name: 'detail',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3437900244997219620),
            name: 'vector',
            type: 28,
            flags: 8,
            indexId: const obx_int.IdUid(9, 2672685320700963395),
            hnswParams: obx_int.ModelHnswParams(
              dimensions: 1536,
              distanceType: 2,
            )),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3549650884794842485),
            name: 'statusIndex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4079455490760423206),
            name: 'deadline',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(10, 2876654507844306934)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5062046738980920197),
            name: 'clock',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7700129863954245269),
            name: 'createdAt',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(11, 5204193897549032489))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 6033791281029208454),
      lastIndexId: const obx_int.IdUid(11, 5204193897549032489),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    LlmConfigEntity: obx_int.EntityDefinition<LlmConfigEntity>(
        model: _entities[0],
        toOneRelations: (LlmConfigEntity object) => [],
        toManyRelations: (LlmConfigEntity object) => {},
        getId: (LlmConfigEntity object) => object.id,
        setId: (LlmConfigEntity object, int id) {
          object.id = id;
        },
        objectToFB: (LlmConfigEntity object, fb.Builder fbb) {
          final providerOffset = object.provider == null
              ? null
              : fbb.writeString(object.provider!);
          final modelOffset =
              object.model == null ? null : fbb.writeString(object.model!);
          final apiKeyOffset =
              object.apiKey == null ? null : fbb.writeString(object.apiKey!);
          final baseUrlOffset =
              object.baseUrl == null ? null : fbb.writeString(object.baseUrl!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, providerOffset);
          fbb.addOffset(2, modelOffset);
          fbb.addOffset(3, apiKeyOffset);
          fbb.addOffset(4, baseUrlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final providerParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final modelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final apiKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final baseUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = LlmConfigEntity(
              id: idParam,
              provider: providerParam,
              model: modelParam,
              apiKey: apiKeyParam,
              baseUrl: baseUrlParam);

          return object;
        }),
    RecordEntity: obx_int.EntityDefinition<RecordEntity>(
        model: _entities[1],
        toOneRelations: (RecordEntity object) => [],
        toManyRelations: (RecordEntity object) => {},
        getId: (RecordEntity object) => object.id,
        setId: (RecordEntity object, int id) {
          object.id = id;
        },
        objectToFB: (RecordEntity object, fb.Builder fbb) {
          final roleOffset =
              object.role == null ? null : fbb.writeString(object.role!);
          final contentOffset =
              object.content == null ? null : fbb.writeString(object.content!);
          final categoryOffset = object.category == null
              ? null
              : fbb.writeString(object.category!);
          final vectorOffset = object.vector == null
              ? null
              : fbb.writeListFloat32(object.vector!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, roleOffset);
          fbb.addOffset(2, contentOffset);
          fbb.addOffset(3, categoryOffset);
          fbb.addOffset(4, vectorOffset);
          fbb.addInt64(5, object.createdAt);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final roleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final vectorParam =
              const fb.ListReader<double>(fb.Float32Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final createdAtParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = RecordEntity(
              id: idParam,
              role: roleParam,
              content: contentParam,
              category: categoryParam,
              vector: vectorParam,
              createdAt: createdAtParam);

          return object;
        }),
    SpeakerEntity: obx_int.EntityDefinition<SpeakerEntity>(
        model: _entities[2],
        toOneRelations: (SpeakerEntity object) => [],
        toManyRelations: (SpeakerEntity object) => {},
        getId: (SpeakerEntity object) => object.id,
        setId: (SpeakerEntity object, int id) {
          object.id = id;
        },
        objectToFB: (SpeakerEntity object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final modelOffset =
              object.model == null ? null : fbb.writeString(object.model!);
          final embeddingOffset = object.embedding == null
              ? null
              : fbb.writeListFloat32(object.embedding!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, modelOffset);
          fbb.addOffset(3, embeddingOffset);
          fbb.addInt64(4, object.createdAt);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final modelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final embeddingParam =
              const fb.ListReader<double>(fb.Float32Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final createdAtParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = SpeakerEntity(
              id: idParam,
              name: nameParam,
              model: modelParam,
              embedding: embeddingParam,
              createdAt: createdAtParam);

          return object;
        }),
    SummaryEntity: obx_int.EntityDefinition<SummaryEntity>(
        model: _entities[3],
        toOneRelations: (SummaryEntity object) => [],
        toManyRelations: (SummaryEntity object) => {},
        getId: (SummaryEntity object) => object.id,
        setId: (SummaryEntity object, int id) {
          object.id = id;
        },
        objectToFB: (SummaryEntity object, fb.Builder fbb) {
          final subjectOffset =
              object.subject == null ? null : fbb.writeString(object.subject!);
          final contentOffset =
              object.content == null ? null : fbb.writeString(object.content!);
          final vectorOffset = object.vector == null
              ? null
              : fbb.writeListFloat32(object.vector!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, subjectOffset);
          fbb.addOffset(2, contentOffset);
          fbb.addOffset(3, vectorOffset);
          fbb.addInt64(4, object.startTime);
          fbb.addInt64(5, object.endTime);
          fbb.addInt64(6, object.createdAt);
          fbb.addBool(7, object.isMeeting);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final isMeetingParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final subjectParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final vectorParam =
              const fb.ListReader<double>(fb.Float32Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final startTimeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final endTimeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final createdAtParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final object = SummaryEntity(
              id: idParam,
              isMeeting: isMeetingParam,
              subject: subjectParam,
              content: contentParam,
              vector: vectorParam,
              startTime: startTimeParam,
              endTime: endTimeParam,
              createdAt: createdAtParam);

          return object;
        }),
    TodoEntity: obx_int.EntityDefinition<TodoEntity>(
        model: _entities[4],
        toOneRelations: (TodoEntity object) => [],
        toManyRelations: (TodoEntity object) => {},
        getId: (TodoEntity object) => object.id,
        setId: (TodoEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TodoEntity object, fb.Builder fbb) {
          final taskOffset =
              object.task == null ? null : fbb.writeString(object.task!);
          final detailOffset =
              object.detail == null ? null : fbb.writeString(object.detail!);
          final vectorOffset = object.vector == null
              ? null
              : fbb.writeListFloat32(object.vector!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, taskOffset);
          fbb.addOffset(2, detailOffset);
          fbb.addOffset(3, vectorOffset);
          fbb.addInt64(4, object.statusIndex);
          fbb.addInt64(5, object.deadline);
          fbb.addBool(6, object.clock);
          fbb.addInt64(7, object.createdAt);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final taskParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final detailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final vectorParam =
              const fb.ListReader<double>(fb.Float32Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final deadlineParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final clockParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final createdAtParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final object = TodoEntity(
              id: idParam,
              task: taskParam,
              detail: detailParam,
              vector: vectorParam,
              deadline: deadlineParam,
              clock: clockParam,
              createdAt: createdAtParam)
            ..statusIndex =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [LlmConfigEntity] entity fields to define ObjectBox queries.
class LlmConfigEntity_ {
  /// See [LlmConfigEntity.id].
  static final id =
      obx.QueryIntegerProperty<LlmConfigEntity>(_entities[0].properties[0]);

  /// See [LlmConfigEntity.provider].
  static final provider =
      obx.QueryStringProperty<LlmConfigEntity>(_entities[0].properties[1]);

  /// See [LlmConfigEntity.model].
  static final model =
      obx.QueryStringProperty<LlmConfigEntity>(_entities[0].properties[2]);

  /// See [LlmConfigEntity.apiKey].
  static final apiKey =
      obx.QueryStringProperty<LlmConfigEntity>(_entities[0].properties[3]);

  /// See [LlmConfigEntity.baseUrl].
  static final baseUrl =
      obx.QueryStringProperty<LlmConfigEntity>(_entities[0].properties[4]);
}

/// [RecordEntity] entity fields to define ObjectBox queries.
class RecordEntity_ {
  /// See [RecordEntity.id].
  static final id =
      obx.QueryIntegerProperty<RecordEntity>(_entities[1].properties[0]);

  /// See [RecordEntity.role].
  static final role =
      obx.QueryStringProperty<RecordEntity>(_entities[1].properties[1]);

  /// See [RecordEntity.content].
  static final content =
      obx.QueryStringProperty<RecordEntity>(_entities[1].properties[2]);

  /// See [RecordEntity.category].
  static final category =
      obx.QueryStringProperty<RecordEntity>(_entities[1].properties[3]);

  /// See [RecordEntity.vector].
  static final vector =
      obx.QueryHnswProperty<RecordEntity>(_entities[1].properties[4]);

  /// See [RecordEntity.createdAt].
  static final createdAt =
      obx.QueryIntegerProperty<RecordEntity>(_entities[1].properties[5]);
}

/// [SpeakerEntity] entity fields to define ObjectBox queries.
class SpeakerEntity_ {
  /// See [SpeakerEntity.id].
  static final id =
      obx.QueryIntegerProperty<SpeakerEntity>(_entities[2].properties[0]);

  /// See [SpeakerEntity.name].
  static final name =
      obx.QueryStringProperty<SpeakerEntity>(_entities[2].properties[1]);

  /// See [SpeakerEntity.model].
  static final model =
      obx.QueryStringProperty<SpeakerEntity>(_entities[2].properties[2]);

  /// See [SpeakerEntity.embedding].
  static final embedding =
      obx.QueryHnswProperty<SpeakerEntity>(_entities[2].properties[3]);

  /// See [SpeakerEntity.createdAt].
  static final createdAt =
      obx.QueryIntegerProperty<SpeakerEntity>(_entities[2].properties[4]);
}

/// [SummaryEntity] entity fields to define ObjectBox queries.
class SummaryEntity_ {
  /// See [SummaryEntity.id].
  static final id =
      obx.QueryIntegerProperty<SummaryEntity>(_entities[3].properties[0]);

  /// See [SummaryEntity.subject].
  static final subject =
      obx.QueryStringProperty<SummaryEntity>(_entities[3].properties[1]);

  /// See [SummaryEntity.content].
  static final content =
      obx.QueryStringProperty<SummaryEntity>(_entities[3].properties[2]);

  /// See [SummaryEntity.vector].
  static final vector =
      obx.QueryHnswProperty<SummaryEntity>(_entities[3].properties[3]);

  /// See [SummaryEntity.startTime].
  static final startTime =
      obx.QueryIntegerProperty<SummaryEntity>(_entities[3].properties[4]);

  /// See [SummaryEntity.endTime].
  static final endTime =
      obx.QueryIntegerProperty<SummaryEntity>(_entities[3].properties[5]);

  /// See [SummaryEntity.createdAt].
  static final createdAt =
      obx.QueryIntegerProperty<SummaryEntity>(_entities[3].properties[6]);

  /// See [SummaryEntity.isMeeting].
  static final isMeeting =
      obx.QueryBooleanProperty<SummaryEntity>(_entities[3].properties[7]);
}

/// [TodoEntity] entity fields to define ObjectBox queries.
class TodoEntity_ {
  /// See [TodoEntity.id].
  static final id =
      obx.QueryIntegerProperty<TodoEntity>(_entities[4].properties[0]);

  /// See [TodoEntity.task].
  static final task =
      obx.QueryStringProperty<TodoEntity>(_entities[4].properties[1]);

  /// See [TodoEntity.detail].
  static final detail =
      obx.QueryStringProperty<TodoEntity>(_entities[4].properties[2]);

  /// See [TodoEntity.vector].
  static final vector =
      obx.QueryHnswProperty<TodoEntity>(_entities[4].properties[3]);

  /// See [TodoEntity.statusIndex].
  static final statusIndex =
      obx.QueryIntegerProperty<TodoEntity>(_entities[4].properties[4]);

  /// See [TodoEntity.deadline].
  static final deadline =
      obx.QueryIntegerProperty<TodoEntity>(_entities[4].properties[5]);

  /// See [TodoEntity.clock].
  static final clock =
      obx.QueryBooleanProperty<TodoEntity>(_entities[4].properties[6]);

  /// See [TodoEntity.createdAt].
  static final createdAt =
      obx.QueryIntegerProperty<TodoEntity>(_entities[4].properties[7]);
}
